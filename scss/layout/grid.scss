@import "../base/breakpoint-values.scss";
@import "../base/global-variables.scss";
@import "../base/mixins.scss";

$unit-padding: $GRID_SPACING;

// div
[class*="unit-"] {
  float: left;
  padding: $unit-padding;
}

.grid::after, .clearfix::after {
  @include clearfix();
}

// div
.grid {
  margin: -1 * $unit-padding;

  &.tight {
    margin: -0.5 * $unit-padding;

    [class*="unit-"] {
      padding: 0.5 * $unit-padding;
    }
  }

  & + * {
    clear: left;
  }
}

// div
.new-line {
  float: left;
  width: 100%;
}

@for $index from 1 through $UNITS {
  .unit-#{$index} { width: percentage($index / $UNITS); }
}

@for $index from 1 through $UNITS {
  .push-#{$index} { margin-left: percentage($index / $UNITS); }
}

@media screen and (min-width: $sm-lower) and (max-width: $sm-upper) {
  .grid.tight.no-tight-sm {
    @include tight-cancel($unit-padding);
  }

  .grid.tight-sm {
    @include tight-responsive($unit-padding);
  }

  @for $index from 1 through $UNITS {
    .unit-#{$index}-sm { width: percentage($index / $UNITS); }
  }

  @for $index from 1 through $UNITS {
    .push-#{$index}-sm { margin-left: percentage($index / $UNITS); }
  }
}

@media screen and (min-width: $md-lower) and (max-width: $md-upper) {
  .grid.tight.no-tight-md {
    @include tight-cancel($unit-padding);
  }

  .grid.tight-md {
    @include tight-responsive($unit-padding);
  }

  @for $index from 1 through $UNITS {
    .unit-#{$index}-md { width: percentage($index / $UNITS); }
  }

  @for $index from 1 through $UNITS {
    .push-#{$index}-md { margin-left: percentage($index / $UNITS); }
  }

}

@media screen and (min-width: $lg-and-up) {
  .grid.tight.no-tight-lg {
    @include tight-cancel($unit-padding);
  }

  .grid.tight-lg {
    @include tight-responsive($unit-padding);
  }

  @for $index from 1 through $UNITS {
    .unit-#{$index}-lg { width: percentage($index / $UNITS); }
  }

  @for $index from 1 through $UNITS {
    .push-#{$index}-lg { margin-left: percentage($index / $UNITS); }
  }
}
